version: '2'

services:
    db:
        container_name: sf_pgsql
        image: postgres:9
        volumes:
            - "./data/db:/var/lib/postgresql"
        environment:
            POSTGRES_DB: ${DB}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - "5432:5432"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.3
    redis:
        container_name: sf_redis
        image: redis:alpine
        ports:
            - "6379:6379"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.4
    php:
        container_name: sf_phpfpm
        build:
            context: php7-fpm
            args:
                TIMEZONE: ${TIMEZONE}
        ports:
            - "80:8000"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.2
        volumes:
            - app-sync:/var/www/symfony:nocopy  #for docker-sync
            - ./logs/symfony:/var/www/symfony/var/logs
        links:
            - redis
            - db
            - centrifugo
    nodejs:
        container_name: sf_nodejs
        image: node:alpine
        user: "node"
        volumes:
            - ${SYMFONY_APP_PATH}:/var/www/symfony
        working_dir: /var/www/symfony
    centrifugo:
        container_name: sf_centrifugo
        image: centrifugo/centrifugo
        command: centrifugo -c config.yml -w --port=8000  --log_level=debug --debug --insecure --address=0.0.0.0
        ports:
            - "8000:8000"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.5
        volumes:
            - ./centrifugo/config.yml:/centrifugo/config.yml   # centrifugo -c config.json -w /opt/centrifugo/web
    rabbit:
        container_name: sf_rabbit
        hostname: rabbit
        image: rabbitmq:3-management
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
        ports:
            - "5672:5672"
            - "15672:15672"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.6
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.4.0
        container_name: sf_elastic
        environment:
            - cluster.name=docker-cluster
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - esdata1:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.7
    kibana:
        image: docker.elastic.co/kibana/kibana:6.4.0
        container_name: sf_kibana
        volumes:
          - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
        environment:
            ELASTICSEARCH_URL: http://10.5.0.7:9200
        ports:
            - "5601:5601"
        links:
            - elasticsearch
        networks:
            vpcbr:
                ipv4_address: 10.5.0.8

    mongodb:
        container_name: sf_mongodb
        image: mongo:4.0
        environment:
            MONGO_DATA_DIR: "/data/db"
            MONGODB_USER: ${MONGO_USER}
            MONGODB_PASS: ${MONGO_PASSWORD}
        volumes:
            - "./data/mongodb:/data/db"
        ports:
            - 27017:27017
        networks:
            vpcbr:
                ipv4_address: 10.5.0.9
    micro1php:
        container_name: micro1_sf_phpfpm
        build:
            context: micro1-php7-fpm
            args:
                TIMEZONE: ${TIMEZONE}
        ports:
            - "8080:8000"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.10
        volumes:
            - micro1-app-sync:/var/www/symfony:nocopy  #for docker-sync
            - ./logs/micro1_symfony:/var/www/symfony/var/logs
        links:
            - redis
    micro2php:
        container_name: micro2_sf_phpfpm
        build:
            context: micro2-php7-fpm
            args:
                TIMEZONE: ${TIMEZONE}
        ports:
            - "8088:8000"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.11
        volumes:
            - micro2-app-sync:/var/www/symfony:nocopy  #for docker-sync
            - ./logs/micro2_symfony:/var/www/symfony/var/logs
        links:
            - micro2db
    micro2db:
        container_name: micro2_sf_pgsql
        image: postgres:9
        volumes:
            - "./data/micro2db:/var/lib/postgresql"
        environment:
            POSTGRES_DB: ${MICRO2_DB}
            POSTGRES_USER: ${MICRO2_DB_USER}
            POSTGRES_PASSWORD: ${MICRO2_DB_PASSWORD}
        ports:
            - "5433:5432"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.12
    micro3bcw:
        container_name: micro3_sf_bcw
        build:
            context: micro3-bcw
        ports:
            - "3000:3000"
        networks:
            vpcbr:
                ipv4_address: 10.5.0.13
        command: blockchain-wallet-service start --port 3000

volumes:
    esdata1:
        driver: local
    app-sync:
        external: true
    micro1-app-sync:
        external: true
    micro2-app-sync:
        external: true

networks:
    vpcbr:
        driver: bridge
        ipam:
            config:
            - subnet: 10.5.0.0/16
              gateway: 10.5.0.1
